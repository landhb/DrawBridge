name: "Main"

on:
  push:
    branches: [ "master" ]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      # Currently requires nixmodule >= 0.4.0 to use initrd
      - name: Install or upgrade nixmodule
        shell: bash
        run: |
          if ! command -v nixmodule; then cargo install nixmodule; fi; \
          nixmodule -V; \
          if [ $(printf '%s\n' $(nixmodule -V | cut -d " " -f 2) "0.4.0" | sort -V | head -n1) != "0.4.0" ]; then cargo install -f nixmodule; fi

      # Cache installation
      - name: Cache Nixmodule Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nixmodule
            ~/.cargo/
          key: ${{ runner.os }}-nixmodule-v1

  test:
    runs-on: ubuntu-latest
    name: Test
    needs: setup
    strategy:
      matrix:
        version: ["6.0.6", "5.17", "5.15", "5.10", "5.8", "5.4", "4.19", "4.14", "4.9", "4.4"]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
            profile: minimal
            toolchain: stable
            target: x86_64-unknown-linux-musl
            override: true

      # Requires qemu-system and musl linker
      - name: Install deps
        shell: bash
        run: |
          sudo apt update
          sudo apt install qemu-system musl-tools

      # Install nixmodule from cache installation
      - name: Cache Nixmodule Artifacts
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/nixmodule
            ~/.cargo/
          key: ${{ runner.os }}-nixmodule-v1

      # Run the test composite action
      - name: Run Test
        id: run_test
        uses: ./.github/actions/test
        with:
          kernel: ${{ matrix.version }}

      # Run the test composite action
      - name: Create badges
        id: create_badges
        uses: ./.github/actions/badge
        with:
          kernel: ${{ matrix.version }}
          build-status: ${{ steps.run_test.outputs.build-status }}
          build-color: ${{ steps.run_test.outputs.build-color }}
          insmod-status: ${{ steps.run_test.outputs.insmod-status }}
          insmod-color: ${{ steps.run_test.outputs.insmod-color }}
          test-status: ${{ steps.run_test.outputs.test-status }}
          test-color: ${{ steps.run_test.outputs.test-color }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Pass/Fail based on original test exit code
      - name: Exit
        run: exit ${{ steps.run_test.outputs.exit-code }}
